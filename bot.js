const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const https = require('https');
const axios = require('axios');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const botToken = process.env.BOT_TOKEN;
const webAppUrl = process.env.WEBAPP_URL || 'https://ra.nov.ru';
const apiUrl = process.env.API_URL || 'http://flower-backend:3000';

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
console.log('===== CONFIGURATION =====');
console.log(`botToken: ${botToken ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Å–∫—Ä—ã—Ç)' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!'}`);
console.log(`webAppUrl: ${webAppUrl}`);
console.log(`apiUrl: ${apiUrl}`);
console.log(`NODE_ENV: ${process.env.NODE_ENV}`);
console.log(`PORT: ${process.env.PORT}`);
console.log('========================');

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
let servicesAvailable = false;
let checkingServices = false;
let lastCheck = 0;
const CHECK_INTERVAL = 30000; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(botToken);

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook
const app = express();
app.use(express.json());
app.use(cors());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
async function checkServicesAvailability() {
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  console.log(`webAppUrl: ${webAppUrl}`);
  console.log(`apiUrl: ${apiUrl}`);
  
  if (checkingServices) return servicesAvailable;
  
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (Date.now() - lastCheck < CHECK_INTERVAL) {
    return servicesAvailable;
  }
  
  checkingServices = true;
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫—É–Ω–¥
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: ${apiUrl}/health`);
    const response = await axios.get(`${apiUrl}/health`, { timeout: 5000 });
    servicesAvailable = response.status === 200;
    console.log(`–°–µ—Ä–≤–∏—Å—ã ${servicesAvailable ? '–¥–æ—Å—Ç—É–ø–Ω—ã' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}`);
    if (servicesAvailable) {
      console.log('–û—Ç–≤–µ—Ç API:', response.data);
    }
  } catch (error) {
    servicesAvailable = false;
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error.message);
    console.log('–°—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏');
  } finally {
    checkingServices = false;
    lastCheck = Date.now();
  }
  
  return servicesAvailable;
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥
bot.use(async (ctx, next) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  if (!ctx.message && !ctx.callbackQuery) {
    return next();
  }
  
  // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏ /status
  if (ctx.message && ctx.message.text && 
      (ctx.message.text === '/start' || ctx.message.text === '/status')) {
    return next();
  }
  
  const available = await checkServicesAvailability();
  if (!available) {
    return ctx.reply('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.');
  }
  
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
bot.command('status', async (ctx) => {
  console.log("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status");
  try {
    const available = await checkServicesAvailability();
    
    // –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const configInfo = `
üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞:
- WEBAPP_URL: ${webAppUrl}
- API_URL: ${apiUrl}
- –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}
- –ü–æ—Ä—Ç: ${PORT}`;
    
    if (available) {
      console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /status");
      await ctx.reply(`‚úÖ –°–µ—Ä–≤–∏—Å—ã —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.\n${configInfo}`);
    } else {
      console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /status");
      await ctx.reply(`‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n${configInfo}`);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /status:", error);
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot.start((ctx) => {
  console.log("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", ctx.from.id);
  try {
    console.log(`–°–æ–∑–¥–∞—é WebApp –∫–Ω–æ–ø–∫—É —Å URL: ${webAppUrl}`);
    ctx.reply(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.keyboard([
        [Markup.button.webApp('üåπ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', `${webAppUrl}`)],
        ['üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
        ['üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', '–¢–µ—Å—Ç WebApp']
      ]).resize()
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:", error);
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const text = ctx.message.text;

  if (text === 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º') {
    ctx.reply('–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (XXX) XXX-XX-XX');
  }
  else if (text === 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.reply('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:',
      Markup.inlineKeyboard([
        Markup.button.webApp('–ú–æ–∏ –∑–∞–∫–∞–∑—ã', `${webAppUrl}/profile`)
      ])
    );
  }
  else if (text === 'üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã') {
    const available = await checkServicesAvailability();
    if (available) {
      ctx.reply('‚úÖ –°–µ—Ä–≤–∏—Å—ã —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.');
    } else {
      ctx.reply('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.');
    }
  }
  else if (text === '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebApp') {
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    ctx.reply(`WebApp URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞: ${webAppUrl}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤ –±—Ä–∞—É–∑–µ—Ä–µ.`);
    
    // –î–æ–±–∞–≤–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebApp —Å –æ–±–æ–∏–º–∏ URL
    ctx.reply(
      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ WebApp:',
      Markup.inlineKeyboard([
        Markup.button.webApp('–í–∞—à WebApp', `${webAppUrl}`)
      ])
    );
  }
  else if (text === '–¢–µ—Å—Ç WebApp') {
    // –¢–µ—Å—Ç–æ–≤—ã–π WebApp –æ—Ç Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    ctx.reply(
      '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ–º–æ WebApp –æ—Ç Telegram:',
      Markup.inlineKeyboard([
        Markup.button.webApp('Telegram Demo', 'https://telegram-web-app.github.io/demo')
      ])
    );
  }
  else {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω',
      Markup.keyboard([
        [Markup.button.webApp('üåπ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', `${webAppUrl}`)],
        ['üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
        ['üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å WebApp', '–¢–µ—Å—Ç WebApp']
      ]).resize()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  const available = await checkServicesAvailability();
  if (!available) {
    return ctx.reply('‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ.');
  }
  
  const data = ctx.webAppData.data;
  try {
    const orderData = JSON.parse(data);
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderData.orderId}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  } catch (e) {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.');
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞
app.post('/telegram-webhook', (req, res) => {
  console.log("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /telegram-webhook");
  bot.handleUpdate(req.body, res);
});

// –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–µ–±–∞–≥–∞
app.get('/debug', (req, res) => {
  res.status(200).json({
    status: 'ok',
    config: {
      webAppUrl,
      apiUrl,
      environment: process.env.NODE_ENV || 'development',
      port: PORT
    },
    timestamp: new Date().toISOString()
  });
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/telegram-test', (req, res) => {
  res.send(`
    <html>
      <head>
        <title>–¢–µ—Å—Ç Telegram –±–æ—Ç–∞</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
          body { font-family: Arial, sans-serif; padding: 20px; }
          .button { 
            display: inline-block; 
            background: #30a3e6; 
            padding: 10px 20px; 
            color: white; 
            border-radius: 5px; 
            text-decoration: none; 
            margin-top: 20px;
          }
        </style>
      </head>
      <body>
        <h1>–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Telegram –±–æ—Ç–∞</h1>
        <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.</p>
        <p>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${new Date().toLocaleString()}</p>
        <p>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</p>
        <ul>
          <li>WebApp URL: ${webAppUrl}</li>
          <li>API URL: ${apiUrl}</li>
          <li>–†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}</li>
          <li>–ü–æ—Ä—Ç: ${PORT}</li>
        </ul>
        <a href="/debug" class="button">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é</a>
      </body>
    </html>
  `);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
async function initializeBot() {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  bot.catch((err, ctx) => {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${ctx.updateType}:`, err);
    if (ctx.message) {
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  try {
    await checkServicesAvailability();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
  }
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  setInterval(async () => {
    try {
      await checkServicesAvailability();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', error);
    }
  }, CHECK_INTERVAL);
  
  if (process.env.NODE_ENV === 'production') {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –≤ production
      const httpsOptions = {
        key: fs.readFileSync(path.resolve(__dirname, 'privkey.pem')),
        cert: fs.readFileSync(path.resolve(__dirname, 'fullchain.pem'))
      };

      https.createServer(httpsOptions, app).listen(PORT, () => {
        console.log(`Telegram bot server is running on port ${PORT} with HTTPS`);

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
        const webhookUrl = `${webAppUrl}/telegram-webhook`;
        bot.telegram.setWebhook(webhookUrl).then(() => {
          console.log(`Webhook set to ${webhookUrl}`);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫
          bot.telegram.getWebhookInfo().then(info => {
            console.log('Webhook info:', JSON.stringify(info));
          }).catch(err => {
            console.error('Error getting webhook info:', err.message);
          });
        }).catch(err => {
          console.error('Error setting webhook:', err.message);
        });
      });
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTPS —Å–µ—Ä–≤–µ—Ä–∞:', error);
      process.exit(1);
    }
  } else {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      app.listen(PORT, () => {
        console.log(`Telegram bot server is running on port ${PORT}`);
      });

      // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ long polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      bot.launch().then(() => {
        console.log('Bot started in polling mode');
      }).catch(err => {
        console.error('Error starting bot in polling mode:', err);
      });
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞:', error);
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initializeBot();

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));