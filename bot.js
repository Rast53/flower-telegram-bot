const { Telegraf, Markup } = require('telegraf');
const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const https = require('https');
const axios = require('axios');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const botToken = process.env.BOT_TOKEN;
const webAppUrl = process.env.WEBAPP_URL || 'https://ra.nov.ru';
const apiUrl = process.env.API_URL || 'http://flower-backend:3000';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
let servicesAvailable = false;
let checkingServices = false;
let lastCheck = 0;
const CHECK_INTERVAL = 30000; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(botToken);

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è webhook
const app = express();
app.use(express.json());
app.use(cors());

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
async function checkServicesAvailability() {
  if (checkingServices) return servicesAvailable;
  
  // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  if (Date.now() - lastCheck < CHECK_INTERVAL) {
    return servicesAvailable;
  }
  
  checkingServices = true;
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫—É–Ω–¥
    const response = await axios.get(`${apiUrl}/api/health`, { timeout: 5000 });
    servicesAvailable = response.status === 200;
    console.log(`–°–µ—Ä–≤–∏—Å—ã ${servicesAvailable ? '–¥–æ—Å—Ç—É–ø–Ω—ã' : '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'}`);
  } catch (error) {
    servicesAvailable = false;
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:', error.message);
  } finally {
    checkingServices = false;
    lastCheck = Date.now();
  }
  
  return servicesAvailable;
}

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–º–∞–Ω–¥
bot.use(async (ctx, next) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  if (!ctx.message && !ctx.callbackQuery) {
    return next();
  }
  
  // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start –∏ /status
  if (ctx.message && ctx.message.text && 
      (ctx.message.text === '/start' || ctx.message.text === '/status')) {
    return next();
  }
  
  const available = await checkServicesAvailability();
  if (!available) {
    return ctx.reply('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è.');
  }
  
  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
bot.command('status', async (ctx) => {
  const available = await checkServicesAvailability();
  if (available) {
    ctx.reply('‚úÖ –°–µ—Ä–≤–∏—Å—ã —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.');
  } else {
    ctx.reply('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.');
  }
});

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot.start((ctx) => {
  ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([
      [Markup.button.webApp('üåπ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', `${webAppUrl}`)],
      ['üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
      ['üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã']
    ]).resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const text = ctx.message.text;

  if (text === 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º') {
    ctx.reply('–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +7 (XXX) XXX-XX-XX');
  }
  else if (text === 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.reply('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:',
      Markup.inlineKeyboard([
        Markup.button.webApp('–ú–æ–∏ –∑–∞–∫–∞–∑—ã', `${webAppUrl}/profile`)
      ])
    );
  }
  else if (text === 'üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã') {
    const available = await checkServicesAvailability();
    if (available) {
      ctx.reply('‚úÖ –°–µ—Ä–≤–∏—Å—ã —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã.');
    } else {
      ctx.reply('‚ö†Ô∏è –°–µ—Ä–≤–∏—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.');
    }
  }
  else {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω',
      Markup.keyboard([
        [Markup.button.webApp('üåπ –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', `${webAppUrl}`)],
        ['üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'],
        ['üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã']
      ]).resize()
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  const available = await checkServicesAvailability();
  if (!available) {
    return ctx.reply('‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ.');
  }
  
  const data = ctx.webAppData.data;
  try {
    const orderData = JSON.parse(data);
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${orderData.orderId}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  } catch (e) {
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.');
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è Telegram –±–æ—Ç–∞
app.post('/webhook', (req, res) => {
  bot.handleUpdate(req.body, res);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
app.get('/health', (req, res) => {
  res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
async function initializeBot() {
  console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...');
  
  // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  await checkServicesAvailability();
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
  setInterval(checkServicesAvailability, CHECK_INTERVAL);
  
  if (process.env.NODE_ENV === 'production') {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –≤ production
    const httpsOptions = {
      key: fs.readFileSync(path.resolve(__dirname, 'privkey.pem')),
      cert: fs.readFileSync(path.resolve(__dirname, 'fullchain.pem'))
    };

    https.createServer(httpsOptions, app).listen(PORT, () => {
      console.log(`Telegram bot server is running on port ${PORT} with HTTPS`);

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
      const webhookUrl = `${webAppUrl}/telegram-webhook`;
      bot.telegram.setWebhook(webhookUrl).then(() => {
        console.log(`Webhook set to ${webhookUrl}`);
      });
    });
  } else {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    app.listen(PORT, () => {
      console.log(`Telegram bot server is running on port ${PORT}`);
    });

    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ long polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    bot.launch().then(() => {
      console.log('Bot started in polling mode');
    });
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
initializeBot();

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));